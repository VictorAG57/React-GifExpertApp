{"version":3,"sources":["components/AddCategory.jsx","helpers/GetGifs.jsx","components/GifGridItem.jsx","components/GifGrid.jsx","hooks/useFetchGifs.jsx","GifExpertApp.jsx","index.js"],"names":["AddCategory","setCategory","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","GetGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setstate","useEffect","setTimeout","then","useFetchGifs","GifExpertApp","categorys","ReactDOM","render","document","getElementById"],"mappings":"4LAYaA,EAAc,SAAC,GAAqB,IAAnBC,EAAkB,EAAlBA,YAE1B,EAAoCC,mBAAS,IAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KAwBA,OAEI,aADA,CACA,QAAMC,SAjBW,SAACC,GAGlBA,EAAEC,iBAICJ,EAAWK,OAAOC,OAAS,IAG1BR,GAAa,SAAAS,GAAI,OAAMP,GAAN,mBAAqBO,OACtCN,EAAc,MAMlB,SACI,uBAAOO,KAAK,OACRC,MAAQT,EACRU,SAzBc,SAACP,GACvBF,EAAcE,EAAEQ,OAAOF,a,+BCZlBG,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DAEbC,EAFa,iDAEoCC,UAAUH,GAF9C,+DAGAI,MAAOF,GAHP,cAGbG,EAHa,gBAIIA,EAAKC,OAJT,uBAIXC,EAJW,EAIXA,KAEFC,EAAOD,EAAKE,KAAK,SAAAC,GAAQ,IAAD,EAC1B,MAAO,CACHC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QAVvB,kBAcZM,GAdY,4CAAH,sDCCPO,EAAc,SAAC,GAAsB,EAApBJ,GAAqB,IAAjBC,EAAgB,EAAhBA,MAAOV,EAAS,EAATA,IAIrC,OACI,sBAAKc,UAAU,2DAAf,UACI,qBAAKC,IAAKf,EAAKgB,IAAKN,IACpB,4BAAKA,QCFJO,EAAU,SAAC,GAAkB,IAAhBnB,EAAe,EAAfA,SAEtB,ECHwB,SAAEA,GAI1B,MAA0Bd,mBAAS,CAC/BqB,KAAM,GACNa,SAAS,IAFb,mBAAOC,EAAP,KAAcC,EAAd,KAkBA,OAbAC,qBAAW,WAEPC,YAAY,WACRzB,EAASC,GACJyB,MAAK,SAAAf,GACFY,EAAS,CACLf,KAAMG,EACNU,SAAS,SAGtB,OACJ,CAAEpB,IAEEqB,EDnB0BK,CAAc1B,GAAlCa,EAAb,EAAQN,KAAaa,EAArB,EAAqBA,QAErB,OACI,eAAC,WAAD,WACI,oBAAIJ,UAAU,sDAAd,SAAsEhB,IAEpEoB,GAAW,mBAAGJ,UAAU,uBAAb,qBAEb,qBAAKA,UAAU,YAAf,SAEIH,EAAOJ,KAAK,SAAAC,GAAG,OACX,cAAC,EAAD,eAEQA,GADCA,EAAIC,aEclBgB,EAnCa,WAExB,MAAiCzC,mBAAS,CAAC,iBAA3C,mBAAO0C,EAAP,KAAkB3C,EAAlB,KAQA,OACI,eAAC,WAAD,WACI,8CAOA,cAAC,EAAD,CAAaA,YAAcA,IAE3B,uBAEA,6BAEQ2C,EAAUnB,KAAK,SAAAT,GAAQ,OAEnB,aADA,CACC,EAAD,CAA0BA,SAAWA,GAAtBA,YC3BvC6B,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,U","file":"static/js/main.fe0d53cb.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport PropsTypes from \"prop-types\";\n\n/** Función del componente AddCategory\n * \n * Esté me permite agregar una categoria a mi página, el usuario ingresa\n * en una caja de texto la categoría que desea agragar, y al precionar enter (submit)\n * actualiza el estado y lo agrega a una lista con las demás categorias.\n * \n * Esté componente complementa al componente pruncipal GifExpertApp.\n */\n\nexport const AddCategory = ({ setCategory }) => {\n\n    const [inputValue, setInputValue] = useState(\"\")\n\n    //Obtenemos el valor de nuestra caja de texto para actualizar el estado.\n    //Lo escrito por el usuario\n    const handleInputChange = (e)=> {\n        setInputValue(e.target.value)\n    };\n\n    //Cambiamos el estado con \"handleSubmit\", agregamos un elemento más al etsado\n    const handleSubmit = (e)=> {\n        //Evitamos que el usuario al dar enter refresque la página\n        //ya que es un formulario\n        e.preventDefault()\n\n        //Meidante el if, evitamos que se pueda agregar a la lista un elemento\n        //sin coontenido\n        if(inputValue.trim().length > 2){\n            //Primero colocamos inputValue, para cuando se renderize, lo\n            //primero que aparezac sea la ultima busqueda y no aparezca hasta el final\n            setCategory( cats => [ inputValue, ...cats])\n            setInputValue(\"\")\n        }\n    };\n\n    return (\n        //Usamos el onSubmit pra implementar la función \"handleSubmit\"\n        <form onSubmit={ handleSubmit }>\n            <input type=\"text\" \n                value={ inputValue } \n                onChange={ handleInputChange }>\n            </input>\n        </form>\n    );\n}\n\n//Obligamos a que \"setCategory\" sea obligatoria\nAddCategory.propTypes = {\n    setCategory: PropsTypes.func.isRequired\n};\n\n","/**\n * Esté helpe rnos permite realizar peticiones de imagenes, solamente hace\n * la petición y la información nos la retorna para poderla usar.\n * ESTÉ ES UN HELPER, lo que hace es siempre retonarnos lo que haga de manera\n * sencilla.\n */\n\nexport const GetGifs = async( category ) => {\n\n    const url = `https://api.giphy.com/v1/gifs/search?q=${ encodeURI(category) }&limit=10&api_key=KoFHZh6MH418tlWrWB55Gv0nalFLePlV`;\n    const resp = await fetch( url )\n    const { data } = await resp.json()\n\n    const gifs = data.map( img => {\n        return {\n            id: img.id,\n            title: img.title,\n            url: img.images?.downsized_medium.url\n        }\n    })\n\n    return gifs;\n}\n\n/**\n *    const getGifs = async() => {\n\n        const url = `https://api.giphy.com/v1/gifs/search?q=${ encodeURI(category) }&limit=10&api_key=KoFHZh6MH418tlWrWB55Gv0nalFLePlV`;\n        const resp = await fetch( url )\n        const { data } = await resp.json()\n\n        const gifs = data.map( img => {\n            return {\n                id: img.id,\n                title: img.title,\n                url: img.images?.downsized_medium.url\n            }\n        })\n\n        console.log( gifs )\n        setImages( gifs )\n    }\n\n */\n","import React from 'react'\nimport \"../index.css\"\n\n/**\n * Esté componente es el encargado de la estructura de cada\n * carta de gif que aparece.\n */\n\nexport const GifGridItem = ({ id, title, url}) => {\n    \n    // console.log(img)\n\n    return (\n        <div className=\"card animate__animated animate__bounce animate__delay-2s\">\n            <img src={url} alt={title}></img>\n            <p>{ title }</p>\n        </div>\n    )\n}\n","import React, { Fragment} from 'react';\n\nimport { useFetchGifs } from '../hooks/useFetchGifs';\nimport { GifGridItem } from \"./GifGridItem\";\n\n//Se encarga de la estructura de cada Item de gif, para acomodarla\n//en una estructutura, los organiza todos, para enviar la infotmación\n//a GifExpertApp y la renderize.\n\n//Resive omo argumento la categoría enviada por el usuario para que useFetchGifs\n//se encargue de estructurar la información, que as u vez se conecta con nuestro helper\n//para realizar la petición.\n\nexport const GifGrid = ({ category }) => {\n\n    const { data:images, loading } = useFetchGifs( category )\n\n    return (\n        <Fragment>\n            <h3 className=\"animate__animated animate__bounce animate__delay-2s\">{ category }</h3>\n\n            { loading && <p className=\"animate__fadeInRight\" >Loading</p> }\n\n            <div className=\"card-grid\">\n                { //También puedes extraer las propiedades en img --> {id, title}\n                images.map( img => ( \n                    <GifGridItem\n                        key={img.id} \n                        {...img}>\n                    </GifGridItem> \n                    ))\n                }\n            </div> \n           \n        </Fragment>\n    )\n}\n\n// const [images, setImages] = useState([])\n\n    //Usaos useEffect como acciones secundarias, y aqui la usamos con el fin\n    //de que una vez cargue la página realiza la petición http para traer el contenido.\n    \n    // useEffect( ()=> {\n    //     GetGifs( category )\n    //         .then(imgs => setImages( imgs ))\n    // }, [ category ]) \n\n    //Colocamos [category] como argumento, por si es \n    //necesario que useEffect se vuelva a renderizar, aunque no vaya a pazar pero\n    //así eliminamos un warning que nos aparecera en cosola.\n\n \n    /*\n        <ol>\n            { //También puedes extraer las propiedades en img --> {id, title}\n                images.map( img => (<li key={ img.id }> { img.title } </li>) )\n            }\n        </ol>\n    */","import { useState, useEffect } from \"react\";\nimport { GetGifs } from \"../helpers/GetGifs\";\n\n/** CUSTOM HOOK\n * \n * Esté es un custom hook que nos permite usar la data traida de mi\n * helper GetGifs, para realiar una acción secundaria mediante useEffect.\n * Aquí actualizamos el estado para solamente enviar la información\n * a mi componente de grilla de cursos, y ahi lo renderizen.\n * \n */\n\nexport const useFetchGifs = ( category )=> {\n    //Usaos useEffect como acciones secundarias, y aqui la usamos con el fin\n    //de que una vez cargue la página realiza la petición http para traer el contenido.\n\n    const [state, setstate] = useState({\n        data: [],\n        loading: true\n    });\n\n    useEffect( ()=> {\n\n        setTimeout( ()=> {\n            GetGifs( category )\n                .then(img => {\n                    setstate({\n                        data: img,\n                        loading: false\n                    })\n                })\n        }, 2000)\n    }, [ category ])\n\n    return state;\n\n}","\nimport React, {Fragment} from 'react';\nimport { useState } from 'react';\nimport { AddCategory } from './components/AddCategory';\nimport { GifGrid } from './components/GifGrid';\n\nexport const GifExpertApp = () => {\n\n    const [categorys, setCategory] = useState([\"Rick & Morty\"]);\n\n    // const addCategory = () => {\n    //     setCategoria(\n    //         [...categorys, \"Family guy\"]\n    //     )\n    // }\n\n    return (\n        <Fragment>\n            <h2>GifExpertApp</h2>\n\n            {/* \n                Mediante los props podemos enviar también funciones\n                en este caso enviamos nuestra función para poder cambiar el estado\n                \"setCategory\".\n            */}\n            <AddCategory setCategory={ setCategory } ></AddCategory>\n            \n            <hr></hr>\n\n            <ol>\n                {\n                    categorys.map( category =>( \n                        //return <li key={ category }> { category } </li>\n                        <GifGrid key={ category } category={ category } ></GifGrid>\n                    ))\n                }\n            </ol>\n        </Fragment>\n    )\n}\n\nexport default GifExpertApp;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport GifExpertApp from \"./GifExpertApp\"\n\n\nReactDOM.render(\n  <GifExpertApp></GifExpertApp>,\n  document.getElementById('root')\n);\n\n\n  "],"sourceRoot":""}